// <auto-generated />
using System;
using ApartmentMngSystem.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentMngSystem.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentNumber = 1,
                            BlockNumber = 4,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1608),
                            Floor = 2,
                            Status = 1,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1618),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1623),
                            Floor = 7,
                            Status = 1,
                            Type = "2+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1623),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1625),
                            Floor = 7,
                            Status = 1,
                            Type = "2+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1625),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1626),
                            Floor = 3,
                            Status = 1,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1627),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1628),
                            Floor = 3,
                            Status = 1,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1628),
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1629),
                            Floor = 3,
                            Status = 0,
                            Type = "4+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1630),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1631),
                            Floor = 4,
                            Status = 0,
                            Type = "2+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1631),
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 8,
                            ApartmentNumber = 8,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1632),
                            Floor = 4,
                            Status = 0,
                            Type = "1+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1632)
                        },
                        new
                        {
                            Id = 9,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1633),
                            Floor = 4,
                            Status = 0,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1634)
                        },
                        new
                        {
                            Id = 10,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1635),
                            Floor = 6,
                            Status = 0,
                            Type = "4+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1635)
                        },
                        new
                        {
                            Id = 11,
                            ApartmentNumber = 12,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1636),
                            Floor = 6,
                            Status = 0,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1637)
                        });
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.ApartmentCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("CostType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentCosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 180,
                            ApartmentId = 1,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1813),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1814)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 240,
                            ApartmentId = 1,
                            CostType = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1817),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1817)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 850,
                            ApartmentId = 1,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1819),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1819)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 352,
                            ApartmentId = 2,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1820),
                            IsPaid = false,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1821)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 550,
                            ApartmentId = 2,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1821),
                            IsPaid = false,
                            Month = 10,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1822)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 690,
                            ApartmentId = 2,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1823),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1823)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 880,
                            ApartmentId = 3,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1824),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1825)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 490,
                            ApartmentId = 3,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1827),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1827)
                        },
                        new
                        {
                            Id = 9,
                            Amount = 247,
                            ApartmentId = 4,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1828),
                            IsPaid = true,
                            Month = 10,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1829)
                        },
                        new
                        {
                            Id = 10,
                            Amount = 80,
                            ApartmentId = 4,
                            CostType = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1830),
                            IsPaid = true,
                            Month = 10,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1830)
                        },
                        new
                        {
                            Id = 11,
                            Amount = 89,
                            ApartmentId = 1,
                            CostType = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1831),
                            IsPaid = true,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1831)
                        },
                        new
                        {
                            Id = 12,
                            Amount = 567,
                            ApartmentId = 1,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1832),
                            IsPaid = true,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1833)
                        },
                        new
                        {
                            Id = 13,
                            Amount = 135,
                            ApartmentId = 1,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1834),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(1834)
                        });
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2011),
                            Description = "Faturalar ödendi.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2011),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2014),
                            Description = "Apartman temizlenmemişti.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2015),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2016),
                            Description = "Asansör bozuk, neden ödeme yapıyoruz.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2016),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2017),
                            Description = "Faturalar ödendi.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2017),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2018),
                            Description = "Güvenlik uyuyor.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2018),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2019),
                            Description = "Araçlar özensiz parkediyor, uyarı geçermisiniz? Teşekkürler",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2020),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2021),
                            Description = "Pencerelerden halı, örtü silkelenmesin lütfen. Üst kat uyarılarıma rağmen devam ediyor.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2021),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2022),
                            Description = "Aidatı ödendi.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 22, 54, 21, 110, DateTimeKind.Local).AddTicks(2022),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-49kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "34213123xxx0-asd2–42de-afas29k3X72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-39kmkkmk72cf6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c120ada6-c7ba-47f2-8422-1bde91434794",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEI3+XRhMDNZXHjkjeOFOFIvHWsuT5P3YutH2TkVDuUjen2kb3Eq5vn0yU15sOeKySQ==",
                            PhoneNumber = "5417894512",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28b6a138-b650-454e-be8c-572d3780b7d5",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FirstName = "Yaprak",
                            IdentityNumber = "14975856297",
                            LastName = "Yildirim",
                            PlateNumber = "34NV3128"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "071163fd-f3d0-4ca5-bf96-0a76f2b8e024",
                            Email = "cemgunveren@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CEMGUNVEREN@HOTMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAELxDLHHo2bMOJiIOaTioKsaIiCwHzJXwaBsD9UZTRS3iKx9UtMMqn+CVnWTXRRr2og==",
                            PhoneNumber = "5300708998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d2e9b32-5508-46fc-afed-ef4bcbbef427",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            FirstName = "Cem",
                            IdentityNumber = "35898714563",
                            LastName = "Gunveren",
                            PlateNumber = "34FV07"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17bb7676-e7cf-48e4-81bb-4f605f0982be",
                            Email = "yusuf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YUSUF@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEGjqAGaBNXp6fz/JYUBxRPegS9N+plrFGP5w4GVBDrnEmozllKyCLeJR5AkKlrXRqA==",
                            PhoneNumber = "5329638956",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7c9e784-bcbf-4b83-b410-7c03a09d138f",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            FirstName = "Yusuf",
                            IdentityNumber = "15178945632",
                            LastName = "Aslan",
                            PlateNumber = "34BFF44"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ca5f407-6d69-48de-a63e-fa9fcf1d0a79",
                            Email = "furkankucukali@outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKANKUCUKALI@OUTLOOK.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAENz/a6dLSGhNhcTbHwwryDj3VmXhcLyQhqXlYujk2quCXBMFuzKDqA99AsShey+Ldg==",
                            PhoneNumber = "5329665632",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "204ffe21-de0f-44a8-8344-af80ebc1364d",
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            FirstName = "Furkan",
                            IdentityNumber = "17898774123",
                            LastName = "Kucukali",
                            PlateNumber = "34CV78"
                        },
                        new
                        {
                            Id = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbd4e797-34fa-4286-869e-53959eff304c",
                            Email = "busraozdemir@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAOZDEMIR@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEF3mhbqxEPA9VAxId9JvHnB0vz4llHWrwNUjGKnTnFMPtKGNivFw+gyBesffjj9hjQ==",
                            PhoneNumber = "5417894125",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97a12417-4f70-48ca-ba15-605d9820e320",
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            FirstName = "Busra",
                            IdentityNumber = "14798756332",
                            LastName = "Ozdemir",
                            PlateNumber = "34ZH45"
                        },
                        new
                        {
                            Id = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e7fb33b-c0af-433c-8fe4-e2271409946d",
                            Email = "ayselshn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSELSHN@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEIAl38yji2wzakcvTOUqVYAYXCQ0XueO79HU4dt1QUlQFEKXkgM+Quhu3G9PIWf6hA==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9397cb0b-8f9e-4c9b-b7e7-6442140b478e",
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            FirstName = "Aysel",
                            IdentityNumber = "452256565623",
                            LastName = "Sahin",
                            PlateNumber = "34SHN58"
                        },
                        new
                        {
                            Id = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "242f99b0-b8ce-47ce-9e85-f24175b5670b",
                            Email = "altun58@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALTUN58@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEL4Bawm47oeI1DH3cLPdySdeXwMj9p+tU/6vOCuTDKFs7DnRKt8Qn1gNnPDSNORb+w==",
                            PhoneNumber = "5354869874",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f66faf6-2bf1-4aa2-912d-d1c1a05bfe22",
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            FirstName = "Altun",
                            IdentityNumber = "14978889789",
                            LastName = "Yıldıran",
                            PlateNumber = "34AY78"
                        });
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Apartment", b =>
                {
                    b.HasOne("ApartmentMngSystem.Core.Entities.User", "User")
                        .WithOne("Apartment")
                        .HasForeignKey("ApartmentMngSystem.Core.Entities.Apartment", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.ApartmentCost", b =>
                {
                    b.HasOne("ApartmentMngSystem.Core.Entities.Apartment", "Apartment")
                        .WithMany("ApartmentCosts")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Message", b =>
                {
                    b.HasOne("ApartmentMngSystem.Core.Entities.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Apartment", b =>
                {
                    b.Navigation("ApartmentCosts");
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.User", b =>
                {
                    b.Navigation("Apartment")
                        .IsRequired();

                    b.Navigation("Message");
                });
#pragma warning restore 612, 618
        }
    }
}
