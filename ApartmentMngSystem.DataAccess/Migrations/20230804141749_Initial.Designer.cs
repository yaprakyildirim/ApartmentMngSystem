// <auto-generated />
using System;
using ApartmentMngSystem.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentMngSystem.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230804141749_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentNumber = 1,
                            BlockNumber = 4,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9152),
                            Floor = 2,
                            Status = 1,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9160),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9164),
                            Floor = 7,
                            Status = 1,
                            Type = "2+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9164),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9166),
                            Floor = 7,
                            Status = 1,
                            Type = "2+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9166),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9167),
                            Floor = 3,
                            Status = 1,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9168),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9169),
                            Floor = 3,
                            Status = 1,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9169),
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9170),
                            Floor = 3,
                            Status = 0,
                            Type = "4+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9171),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9172),
                            Floor = 4,
                            Status = 0,
                            Type = "2+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9172),
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6"
                        },
                        new
                        {
                            Id = 8,
                            ApartmentNumber = 8,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9173),
                            Floor = 4,
                            Status = 0,
                            Type = "1+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9174)
                        },
                        new
                        {
                            Id = 9,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9176),
                            Floor = 4,
                            Status = 0,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9176)
                        },
                        new
                        {
                            Id = 10,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9177),
                            Floor = 6,
                            Status = 0,
                            Type = "4+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9178)
                        },
                        new
                        {
                            Id = 11,
                            ApartmentNumber = 12,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9179),
                            Floor = 6,
                            Status = 0,
                            Type = "3+1",
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9179)
                        });
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.ApartmentCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("CostType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentCosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 180,
                            ApartmentId = 1,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9392),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9392)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 240,
                            ApartmentId = 1,
                            CostType = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9395),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9395)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 850,
                            ApartmentId = 1,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9397),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9397)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 352,
                            ApartmentId = 2,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9398),
                            IsPaid = false,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9398)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 550,
                            ApartmentId = 2,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9429),
                            IsPaid = false,
                            Month = 10,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9430)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 690,
                            ApartmentId = 2,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9431),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9431)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 880,
                            ApartmentId = 3,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9432),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9433)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 490,
                            ApartmentId = 3,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9434),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9434)
                        },
                        new
                        {
                            Id = 9,
                            Amount = 247,
                            ApartmentId = 4,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9435),
                            IsPaid = true,
                            Month = 10,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9436)
                        },
                        new
                        {
                            Id = 10,
                            Amount = 80,
                            ApartmentId = 4,
                            CostType = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9436),
                            IsPaid = true,
                            Month = 10,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9437)
                        },
                        new
                        {
                            Id = 11,
                            Amount = 89,
                            ApartmentId = 1,
                            CostType = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9438),
                            IsPaid = true,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9438)
                        },
                        new
                        {
                            Id = 12,
                            Amount = 567,
                            ApartmentId = 1,
                            CostType = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9439),
                            IsPaid = true,
                            Month = 12,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9440)
                        },
                        new
                        {
                            Id = 13,
                            Amount = 135,
                            ApartmentId = 1,
                            CostType = 0,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9441),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9441)
                        });
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9501),
                            Description = "Faturalar ödendi.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9501),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9503),
                            Description = "Apartman temizlenmemişti.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9504),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9505),
                            Description = "Asansör bozuk, neden ödeme yapıyoruz.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9505),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9506),
                            Description = "Faturalar ödendi.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9507),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9508),
                            Description = "Güvenlik uyuyor.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9508),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9509),
                            Description = "Araçlar özensiz parkediyor, uyarı geçermisiniz? Teşekkürler",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9509),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9510),
                            Description = "Pencerelerden halı, örtü silkelenmesin lütfen. Üst kat uyarılarıma rağmen devam ediyor.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9511),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9511),
                            Description = "Aidatı ödendi.",
                            Status = 0,
                            UpdatedTime = new DateTime(2023, 8, 4, 17, 17, 49, 216, DateTimeKind.Local).AddTicks(9512),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-49kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "34213123xxx0-asd2–42de-afas29k3X72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-39kmkkmk72cf6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a63cf79-186a-44b9-be6d-eb544318fbf6",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGV9mdLAAMgzSBbkNbYpg4ZGqrw8IFUUuJ0IBGXkELsIse1+5l2IA3g9gx21ZGkHaQ==",
                            PhoneNumber = "5417894512",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fa506c2-7411-43c3-bf5f-33af97b0cca2",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FirstName = "Yaprak",
                            IdentityNumber = "14975856297",
                            LastName = "Yildirim",
                            PlateNumber = "34NV3128"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6eab375b-5df9-4270-bb7a-579f7b589d97",
                            Email = "cemgunveren@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CEMGUNVEREN@HOTMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTO+/fnBPR8N/MTnlTQG/2o6M0+j/aSXNHzjPgfexwEs4099QReYLXX6LsaDhs3tw==",
                            PhoneNumber = "5300708998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "847bd3fc-8794-4f98-86e0-4b076a1a4c8d",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            FirstName = "Cem",
                            IdentityNumber = "35898714563",
                            LastName = "Gunveren",
                            PlateNumber = "34FV07"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "255c8619-8024-4cfb-a712-be14c6dcebc8",
                            Email = "yusuf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YUSUF@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0vk9qpK0x0SNRvwHev/KYX5j6KiReRoSmDBoKUP+lY7AmYP993RORrNcus03rbrQ==",
                            PhoneNumber = "5329638956",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7af96a38-aa3a-450a-9641-5c20935c7474",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            FirstName = "Yusuf",
                            IdentityNumber = "15178945632",
                            LastName = "Aslan",
                            PlateNumber = "34BFF44"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "101aac64-9a26-4f0d-85e1-290306002db5",
                            Email = "furkankucukali@outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKANKUCUKALI@OUTLOOK.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJQm1Ohf4n/1pniBRuUn2W1jSdKnHFbl9Dzv+F4v7GIagrJZP7DWBHAUmG+HmUZIw==",
                            PhoneNumber = "5329665632",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9ccb3d1-e907-4287-9b27-e54fdd34e88c",
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            FirstName = "Furkan",
                            IdentityNumber = "17898774123",
                            LastName = "Kucukali",
                            PlateNumber = "34CV78"
                        },
                        new
                        {
                            Id = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88abaa66-01e2-4690-9166-a680c07b0ba0",
                            Email = "busraozdemir@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAOZDEMIR@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEKReK8rVoTEFa2mvf0hpYkTXdYgRc8Mjj27BC9eyP5NBlmmZ/HlSXUEPfkuhAjRatQ==",
                            PhoneNumber = "5417894125",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c2244a8-3c80-4fed-9d69-f196232e0c0a",
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            FirstName = "Busra",
                            IdentityNumber = "14798756332",
                            LastName = "Ozdemir",
                            PlateNumber = "34ZH45"
                        },
                        new
                        {
                            Id = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22fd7945-4b82-4401-8c00-721326114f24",
                            Email = "ayselshn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSELSHN@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEMX4MNONvP/6lySHCHacMARMKcY0UNaWoL9TAzjbt46RfSPTYY2dSR1HvXiyIT5hEg==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0891b968-fad0-4558-9573-5b014e6cd9e8",
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            FirstName = "Aysel",
                            IdentityNumber = "452256565623",
                            LastName = "Sahin",
                            PlateNumber = "34SHN58"
                        },
                        new
                        {
                            Id = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bae156ee-344c-4d7a-906e-2b0d73e3fd7a",
                            Email = "altun58@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALTUN58@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEAh+Ur/bR1H6yl28HdLgkS3oVgwi6hykbzchf82W717noLq0McJWanNAG3gvk8XdAw==",
                            PhoneNumber = "5354869874",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a75df7c2-168a-482a-ad77-f4a793a56085",
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            FirstName = "Altun",
                            IdentityNumber = "14978889789",
                            LastName = "Yıldıran",
                            PlateNumber = "34AY78"
                        });
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Apartment", b =>
                {
                    b.HasOne("ApartmentMngSystem.Core.Entities.User", "User")
                        .WithOne("Apartment")
                        .HasForeignKey("ApartmentMngSystem.Core.Entities.Apartment", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.ApartmentCost", b =>
                {
                    b.HasOne("ApartmentMngSystem.Core.Entities.Apartment", "Apartment")
                        .WithMany("ApartmentCosts")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Message", b =>
                {
                    b.HasOne("ApartmentMngSystem.Core.Entities.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.Apartment", b =>
                {
                    b.Navigation("ApartmentCosts");
                });

            modelBuilder.Entity("ApartmentMngSystem.Core.Entities.User", b =>
                {
                    b.Navigation("Apartment")
                        .IsRequired();

                    b.Navigation("Message");
                });
#pragma warning restore 612, 618
        }
    }
}
